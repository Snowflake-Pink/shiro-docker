name: Docker Release Builder

on:
  schedule:
    - cron: '0 */6 * * *'  # 每6小时运行一次
  workflow_dispatch:  # 支持手动触发工作流

jobs:
  check-release-and-build:
    runs-on: ubuntu-latest

    steps:
      # 第一步：检查是否有新的 release
      - name: Check for new release
        id: release_check
        run: |
          # 获取原项目的最新 release
          latest_release=$(curl -s https://api.github.com/repos/<original_owner>/<original_repo>/releases/latest)
          release_tag=$(echo "$latest_release" | jq -r .tag_name)
          
          echo "Latest release: $release_tag"
          
          # 如果获取到新的 release，则继续构建镜像
          echo "RELEASE_TAG=$release_tag" >> $GITHUB_ENV

      # 第二步：检出代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 第三步：设置 QEMU 和 Docker Buildx
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 第四步：登录到 Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 第五步：获取最新 release 的代码
      - name: Checkout release version
        uses: actions/checkout@v4
        with:
          ref: ${{ env.RELEASE_TAG }}

      # 第六步：Docker 元数据处理
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKERHUB_USERNAME }}/shiro
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
            type=raw,value=latest

      # 第七步：构建 Docker 镜像并推送
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          push: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
