name: Auto Build Docker Image on New Release

on:
  schedule:
    - cron: '0 */6 * * *'  # 每6小时运行一次（UTC时间）
  workflow_dispatch:       # 允许手动触发

jobs:
  check-release:
    runs-on: ubuntu-latest
    outputs:
      should-build: ${{ steps.decision.outputs.should-build }}
      release-tag: ${{ steps.get-latest.outputs.tag }}
    steps:
      - name: Get latest release tag
        id: get-latest
        run: |
          response=$(curl -sL \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/innei/shiro/releases/latest)
          tag=$(echo "$response" | jq -r '.tag_name')
          echo "tag=$tag" >> $GITHUB_OUTPUT

      # 定时任务专用：恢复缓存
      - name: Restore cache (schedule trigger only)
        if: github.event_name != 'workflow_dispatch'
        uses: actions/cache@v3
        id: cache-restore
        with:
          path: last_tag.txt
          key: last-tag

      # 决策步骤
      - name: Build decision
        id: decision
        run: |
          # 手动触发直接构建
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "::notice:: Manual trigger, force build"
            echo "should-build=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          # 定时触发需要检查缓存
          current_tag="${{ steps.get-latest.outputs.tag }}"
          
          if [ -f last_tag.txt ]; then
            last_tag=$(cat last_tag.txt)
            echo "::debug:: Last built tag: $last_tag, Current tag: $current_tag"
            if [ "$current_tag" != "$last_tag" ]; then
              echo "::notice:: New tag detected ($last_tag -> $current_tag)"
              echo "should-build=true" >> $GITHUB_OUTPUT
            else
              echo "::notice:: No new tag detected"
              echo "should-build=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "::notice:: No cache found, first run"
            echo "should-build=true" >> $GITHUB_OUTPUT
          fi

  build-docker:
    needs: check-release
    if: needs.check-release.outputs.should-build == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: innei/shiro
          ref: ${{ needs.check-release.outputs.release-tag }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker tools
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Generate Docker tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/shiro
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          push: true

      # 成功构建后更新缓存
      - name: Update build cache
        if: success()
        run: echo "${{ needs.check-release.outputs.release-tag }}" > last_tag.txt

      - name: Save new cache
        if: success()
        uses: actions/cache/save@v3
        with:
          path: last_tag.txt
          key: last-tag

  post-cleanup:
    if: always()
    needs: [check-release, build-docker]
    runs-on: ubuntu-latest
    steps:
      - name: Cleanup on failure
        if: failure()
        run: |
          echo "::warning:: Build failed, cache will not be updated"